#suite LCP

#include "fcs.c"
#include "hdlc.c"
#include "lcp.c"
#include "ipv6cp.c"
#include "test_helpers.c"


#test check_lcp_reject_protocol
uint8_t ppp_frame[] = { 0x01, 0x02 };
uint8_t buffer[PACKET_BUF_SIZE];

// Generate a new frame
int fd = fileno(tmpfile());
lcp_reject_protocol(fd, 0x8021, ppp_frame, sizeof(ppp_frame));

// Read the frame back in again
lseek(fd, 0, SEEK_SET); // Rewind to start of temporary file
int len = hdlc_read_frame(fd, buffer);

ck_assert_uint_eq(len, 14);
ck_assert_uint_eq(hdlc_check_frame(buffer, len), 1);
ck_assert_mem_eq(
    buffer,
    "\xff\x03\xc0\x21"
    "\x08\x01\x00\x08"
    "\x80\x21\x01\x02"
    "\x92\x3e",
    len
);


#test check_lcp_send_conf_req
uint8_t buffer[PACKET_BUF_SIZE];

// Output a frame
int fd = fileno(tmpfile());
lcp_send_conf_req(fd);

// Read the frame back in again
lseek(fd, 0, SEEK_SET); // Rewind to start of temporary file
int len = hdlc_read_frame(fd, buffer);

ck_assert_uint_eq(len, 16);
ck_assert_uint_eq(hdlc_check_frame(buffer, len), 1);
ck_assert_mem_eq(
    buffer,
    "\xff\x03\xc0\x21"
    "\x01\x01\x00\x0a\x05\x06\x00\x00\x00\x00"
    "\x89\x67",
    len
);


#test check_lcp_echo_reply
uint8_t buffer[PACKET_BUF_SIZE];

// Output a frame
int fd = fileno(tmpfile());
lcp_echo_reply(fd);

// Read the frame back in again
lseek(fd, 0, SEEK_SET); // Rewind to start of temporary file
int len = hdlc_read_frame(fd, buffer);

ck_assert_uint_eq(len, 14);
ck_assert_uint_eq(hdlc_check_frame(buffer, len), 1);
ck_assert_mem_eq(
    buffer,
    "\xff\x03\xc0\x21"
    "\x0a\x00\x00\x08\x00\x00\x00\x00"
    "\x6b\xe4",
    len
);


#test check_lcp_append_buf
uint8_t packet[PACKET_BUF_SIZE];
uint8_t bytes[4] = {0x01, 0x02, 0x03, 0x04};

BUF_SET_UINT8(packet, 0, LCP_CONF_REQ);
BUF_SET_UINT8(packet, 1, 0x01);
BUF_SET_UINT16(packet, 2, 4);

ck_assert_uint_eq(4, LCP_PACKET_LEN(packet));
lcp_append_buf(packet, bytes, 4);
ck_assert_uint_eq(8, LCP_PACKET_LEN(packet));

ck_assert_mem_eq(
    packet,
    "\x01\x01\x00\x08"
    "\x01\x02\x03\x04",
    8
);


#test check_lcp_append_option_uint16
uint8_t buffer[PACKET_BUF_SIZE];

BUF_SET_UINT8(buffer, 0, LCP_CONF_REQ);
BUF_SET_UINT8(buffer, 1, 0x01);
BUF_SET_UINT16(buffer, 2, 4);

ck_assert_uint_eq(4, LCP_PACKET_LEN(buffer));
ck_assert_uint_eq(0, LCP_OPTIONS_LEN(buffer));

lcp_append_option_uint16(buffer, LCP_OPTION_MRU, 1280);
ck_assert_uint_eq(4, LCP_OPTIONS_LEN(buffer));

ck_assert_mem_eq(
    buffer,
    "\x01\x01\x00\x08"
    "\x01\x04"
    "\x05\x00",
    8
);


#test check_lcp_append_option_uint32
uint8_t buffer[PACKET_BUF_SIZE];

BUF_SET_UINT8(buffer, 0, LCP_CONF_REQ);
BUF_SET_UINT8(buffer, 1, 0x01);
BUF_SET_UINT16(buffer, 2, 4);

ck_assert_uint_eq(4, LCP_PACKET_LEN(buffer));
ck_assert_uint_eq(0, LCP_OPTIONS_LEN(buffer));

lcp_append_option_uint32(buffer, LCP_OPTION_MAGIC_NUM, 0x12345678);
ck_assert_uint_eq(6, LCP_OPTIONS_LEN(buffer));

ck_assert_mem_eq(
    buffer,
    "\x01\x01\x00\x0a"
    "\x05\x06"
    "\x12\x34\x56\x78",
    10
);


#main-pre
tcase_add_checked_fixture(tc1_1, redirect_stderr, NULL);
